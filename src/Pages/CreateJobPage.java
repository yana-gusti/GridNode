/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Pages;


import services.SelectFile;

import javax.swing.*;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import static grid_node.Main.address;
import static grid_node.Main.port;

/**
 *
 * @author Дом
 */
public class CreateJobPage extends JFrame {
    public File bashScript;
    public File InputFile;
    public File JobFile;
    public static SubmitJobPage submitJobPage;

    public static Socket s;
    public static BufferedReader reader;
    public static PrintWriter writer;




    /**
     * Creates new form CreateJobPage
     */
    public CreateJobPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TopPanel = new JPanel();
        TopLabel = new JLabel();
        MainPanel = new JPanel();
        OpenJobBtn = new JButton();
        CreateJobBtn = new JButton();
        ClearFieldsBtn = new JButton();
        CancelBtn = new JButton();
        jPanel1 = new JPanel();
        MainTabbedPane = new JTabbedPane();
        BashScriptPanel = new JPanel();
        CreateBashScriptBtn = new JButton();
        SelectProgCB = new JComboBox();
        SelectProgLb = new JLabel();
        SelectInputLb = new JLabel();
        SelectInFile = new JButton();
        inputFileLb = new JLabel();
        SelectResolLb = new JLabel();
        SelectResolCB = new JComboBox();
        errorLabel = new JLabel();
        GeneralPanel = new JPanel();
        ExecutLb = new JLabel();
        JobNameLb = new JLabel();
        JobName = new JTextField();
        InputFileLb = new JLabel();
        SelectInputFileBtn = new JButton();
        SelectFileLb = new JLabel();
        SelectInputFileLb = new JLabel();
        SaveBtn = new JButton();
        stdoutLb = new JLabel();
        stdout = new JTextField();
        stderrLb = new JLabel();
        stderr = new JTextField();
        SelectSHCB = new JComboBox();
        SelectInputFileLb2 = new JLabel();
        SelectInputFileBtn2 = new JButton();
        SelectInputFileBtn3 = new JButton();
        SelectInputFileLb3 = new JLabel();
        SelectInputFileBtn4 = new JButton();
        SelectInputFileLb4 = new JLabel();
        EnvironmentPanel = new JPanel();
        gmlogLb = new JLabel();
        gmlog = new JTextField();
        wallTimeLb = new JLabel();
        wallTime = new JTextField();
        countLb = new JLabel();
        count = new JTextField();
        queueLb = new JLabel();
        queue = new JTextField();
        SaveEnvBtn = new JButton();
        runtimeenvironmentLb = new JLabel();
        runtimeenvironment = new JTextField();
        ResultScrollPane = new JScrollPane();
        Result = new JTextPane();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        TopPanel.setBackground(new java.awt.Color(153, 255, 255));
        TopPanel.setForeground(new java.awt.Color(0, 0, 153));
        TopPanel.setToolTipText("Grid Node");
        TopPanel.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N

        TopLabel.setFont(new java.awt.Font("Verdana", 3, 36)); // NOI18N
        TopLabel.setHorizontalAlignment(SwingConstants.CENTER);
        TopLabel.setText("Grid Node");
        TopLabel.setToolTipText("");

        MainPanel.setBackground(new java.awt.Color(204, 255, 255));

        OpenJobBtn.setBackground(new java.awt.Color(0, 204, 204));
        OpenJobBtn.setText("Open Job");
        OpenJobBtn.setActionCommand("Registration");
        OpenJobBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OpenJobBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenJobBtnActionPerformed(evt);
            }
        });

        CreateJobBtn.setBackground(new java.awt.Color(0, 204, 204));
        CreateJobBtn.setText("Create .xrsl File");
        CreateJobBtn.setActionCommand("Registration");
        CreateJobBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CreateJobBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    CreateJobBtnActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
            }
        });

        ClearFieldsBtn.setBackground(new java.awt.Color(0, 204, 204));
        ClearFieldsBtn.setText("Clear Fields");
        ClearFieldsBtn.setActionCommand("Registration");
        ClearFieldsBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ClearFieldsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearFieldsBtnActionPerformed(evt);
            }
        });

        CancelBtn.setBackground(new java.awt.Color(0, 204, 204));
        CancelBtn.setText("Cancel");
        CancelBtn.setActionCommand("Registration");
        CancelBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        MainTabbedPane.setBackground(new java.awt.Color(204, 255, 255));
        MainTabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);

        BashScriptPanel.setBackground(new java.awt.Color(153, 255, 255));

        CreateBashScriptBtn.setBackground(new java.awt.Color(0, 204, 204));
        CreateBashScriptBtn.setText("Create Bash Script");
        CreateBashScriptBtn.setActionCommand("Registration");
        CreateBashScriptBtn.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CreateBashScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    CreateBashScriptBtnActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        SelectProgCB.setModel(new DefaultComboBoxModel(new String[] { "....................", "Quantum Espresso" }));
        SelectProgCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectProgCBActionPerformed(evt);
            }
        });

        SelectProgLb.setText("Select Program");
        SelectProgLb.setHorizontalTextPosition(SwingConstants.CENTER);

        SelectInputLb.setText("Select Input File");
        SelectInputLb.setHorizontalTextPosition(SwingConstants.CENTER);

        SelectInFile.setText("Select");
        SelectInFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInFileActionPerformed(evt);
            }
        });

        inputFileLb.setHorizontalTextPosition(SwingConstants.CENTER);

        SelectResolLb.setText("Select Resolution");
        SelectResolLb.setHorizontalTextPosition(SwingConstants.CENTER);

        SelectResolCB.setModel(new DefaultComboBoxModel(new String[] { "....................", "pw.x" }));
        SelectResolCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectResolCBActionPerformed(evt);
            }
        });

        GroupLayout BashScriptPanelLayout = new GroupLayout(BashScriptPanel);
        BashScriptPanel.setLayout(BashScriptPanelLayout);
        BashScriptPanelLayout.setHorizontalGroup(
            BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(BashScriptPanelLayout.createSequentialGroup()
                .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(BashScriptPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(BashScriptPanelLayout.createSequentialGroup()
                                .addComponent(SelectProgLb, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SelectProgCB, GroupLayout.PREFERRED_SIZE, 205, GroupLayout.PREFERRED_SIZE))
                            .addGroup(BashScriptPanelLayout.createSequentialGroup()
                                .addComponent(SelectResolLb, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SelectResolCB, GroupLayout.PREFERRED_SIZE, 205, GroupLayout.PREFERRED_SIZE))
                            .addGroup(BashScriptPanelLayout.createSequentialGroup()
                                .addComponent(SelectInputLb, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SelectInFile, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputFileLb, GroupLayout.PREFERRED_SIZE, 182, GroupLayout.PREFERRED_SIZE))
                    .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                        .addGroup(GroupLayout.Alignment.LEADING, BashScriptPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(errorLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(BashScriptPanelLayout.createSequentialGroup()
                            .addGap(209, 209, 209)
                            .addComponent(CreateBashScriptBtn, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(270, Short.MAX_VALUE))
        );
        BashScriptPanelLayout.setVerticalGroup(
            BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(BashScriptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectProgCB, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectProgLb, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(inputFileLb, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(SelectInputLb, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SelectInFile)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BashScriptPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectResolCB, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectResolLb, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(42, 42, 42)
                .addComponent(CreateBashScriptBtn, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(errorLabel)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Bash Script", BashScriptPanel);

        GeneralPanel.setBackground(new java.awt.Color(153, 255, 255));

        ExecutLb.setText("Select executable .sh");

        JobNameLb.setText("Job Name");

        InputFileLb.setText("Input Files");

        SelectInputFileBtn.setText("Select First Input File");
        SelectInputFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInputFileBtnActionPerformed(evt);
            }
        });

        SaveBtn.setText("Save");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        stdoutLb.setText("stdout");

        stderrLb.setText("stderr");

        SelectSHCB.setModel(new DefaultComboBoxModel(new String[] { "...................." }));
        SelectSHCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectSHCBActionPerformed(evt);
            }
        });

        SelectInputFileBtn2.setText("Select Second Input File");
        SelectInputFileBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInputFileBtn2ActionPerformed(evt);
            }
        });

        SelectInputFileBtn3.setText("Select Third Input File");
        SelectInputFileBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInputFileBtn3ActionPerformed(evt);
            }
        });

        SelectInputFileBtn4.setText("Select Fourth Input File");
        SelectInputFileBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInputFileBtn4ActionPerformed(evt);
            }
        });

        GroupLayout GeneralPanelLayout = new GroupLayout(GeneralPanel);
        GeneralPanel.setLayout(GeneralPanelLayout);
        GeneralPanelLayout.setHorizontalGroup(
            GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GeneralPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(stdoutLb, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InputFileLb, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ExecutLb, GroupLayout.Alignment.LEADING))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                        .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(GroupLayout.Alignment.LEADING, GeneralPanelLayout.createSequentialGroup()
                                .addComponent(SelectSHCB, GroupLayout.PREFERRED_SIZE, 172, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectFileLb, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.LEADING, GeneralPanelLayout.createSequentialGroup()
                                .addComponent(SelectInputFileBtn, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectInputFileLb, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JobNameLb, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                        .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(GeneralPanelLayout.createSequentialGroup()
                                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                                        .addComponent(SelectInputFileBtn3, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(SelectInputFileLb3, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(stdout, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE))
                                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(stderrLb, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36))
                                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(SelectInputFileBtn4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addComponent(SelectInputFileBtn2, GroupLayout.PREFERRED_SIZE, 185, GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(JobName, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(SelectInputFileLb4, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SelectInputFileLb2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stderr))))
                .addContainerGap())
            .addGroup(GeneralPanelLayout.createSequentialGroup()
                .addGap(326, 326, 326)
                .addComponent(SaveBtn, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        GeneralPanelLayout.setVerticalGroup(
            GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GeneralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                        .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(SelectFileLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(SelectSHCB, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                .addComponent(ExecutLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.TRAILING, GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(JobName, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                .addComponent(JobNameLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GeneralPanelLayout.createSequentialGroup()
                                .addComponent(SelectInputFileLb2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(GroupLayout.Alignment.TRAILING, GeneralPanelLayout.createSequentialGroup()
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(SelectInputFileLb3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(GroupLayout.Alignment.TRAILING, GeneralPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(SelectInputFileBtn3, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))))
                            .addGroup(GroupLayout.Alignment.TRAILING, GeneralPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(SelectInputFileBtn2, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(SelectInputFileBtn, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SelectInputFileLb, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(3, 3, 3)
                                .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(SelectInputFileLb4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(SelectInputFileBtn4, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(GeneralPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(stdout, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addComponent(stderr, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addComponent(stderrLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(GeneralPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(InputFileLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(stdoutLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SaveBtn)
                .addGap(37, 37, 37))
        );

        MainTabbedPane.addTab("General", GeneralPanel);

        EnvironmentPanel.setBackground(new java.awt.Color(153, 255, 255));

        gmlogLb.setText("gmlog");

        wallTimeLb.setText("wallTime");

        countLb.setText("count");

        queueLb.setText("queue");

        SaveEnvBtn.setText("Save");
        SaveEnvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveEnvBtnActionPerformed(evt);
            }
        });

        runtimeenvironmentLb.setText("run time environment");

        GroupLayout EnvironmentPanelLayout = new GroupLayout(EnvironmentPanel);
        EnvironmentPanel.setLayout(EnvironmentPanelLayout);
        EnvironmentPanelLayout.setHorizontalGroup(
            EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                        .addComponent(runtimeenvironmentLb, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(runtimeenvironment))
                    .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                        .addComponent(countLb, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(count))
                    .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                        .addComponent(gmlogLb, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(gmlog, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(queueLb, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wallTimeLb, GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(wallTime, GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(queue))
                .addGap(39, 39, 39))
            .addGroup(GroupLayout.Alignment.TRAILING, EnvironmentPanelLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SaveEnvBtn, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                .addGap(352, 352, 352))
        );
        EnvironmentPanelLayout.setVerticalGroup(
            EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                        .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(gmlogLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addComponent(gmlog, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(wallTimeLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(countLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                .addComponent(count, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                            .addComponent(queueLb, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(EnvironmentPanelLayout.createSequentialGroup()
                        .addComponent(wallTime, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(queue, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(EnvironmentPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(runtimeenvironmentLb, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                    .addComponent(runtimeenvironment, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(SaveEnvBtn, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Environment", EnvironmentPanel);

        MainTabbedPane.setSelectedComponent(BashScriptPanel);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(MainTabbedPane, GroupLayout.PREFERRED_SIZE, 248, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        MainTabbedPane.getAccessibleContext().setAccessibleName("");

        ResultScrollPane.setViewportView(Result);

        GroupLayout MainPanelLayout = new GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(ResultScrollPane)
                    .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.LEADING, MainPanelLayout.createSequentialGroup()
                        .addComponent(OpenJobBtn, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClearFieldsBtn, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CreateJobBtn, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CancelBtn, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenJobBtn, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreateJobBtn, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearFieldsBtn, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                    .addComponent(CancelBtn, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultScrollPane, GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
        );

        GroupLayout TopPanelLayout = new GroupLayout(TopPanel);
        TopPanel.setLayout(TopPanelLayout);
        TopPanelLayout.setHorizontalGroup(
            TopPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TopLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TopPanelLayout.setVerticalGroup(
            TopPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(TopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TopLabel, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(TopPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(TopPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenJobBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenJobBtnActionPerformed
 JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            JobFile = fileChooser.getSelectedFile();
            Result.setText(JobFile.getName());

        } else {
            System.out.println("File access cancelled by user.");

        }
    }//GEN-LAST:event_OpenJobBtnActionPerformed

    private void CreateJobBtnActionPerformed(java.awt.event.ActionEvent evt) throws IOException, ClassNotFoundException {//GEN-FIRST:event_CreateJobBtnActionPerformed



        fileName = JOptionPane.showInputDialog("Enter file name");
        String resultXRSL = Result.getText();
	 if (fileName != null && resultXRSL!= null) {
         try {
             s = new Socket(address, port);
             writer = new PrintWriter(new OutputStreamWriter(s.getOutputStream()));
             reader = new BufferedReader(new InputStreamReader(s.getInputStream()));
             System.out.println("Connected");
         } catch (IOException ex) {
             System.out.print(ex);
         }

         System.out.println("writing to server: "+fileName +"\n");
         writer.write("createXRSLFile\n");
         writer.write(fileName+"\n");
         writer.write(resultXRSL+"\n");

         getResult(errorLabel, "getResult");
        submitJobPage = new SubmitJobPage();
        submitJobPage.setVisible(true);
        ProfilePage.createJobPage.setVisible(false);}}

    public static void getResult(JLabel errorLabel, String command) throws IOException {
        try {
            s = new Socket(address, port);
            writer = new PrintWriter(new OutputStreamWriter(s.getOutputStream()));
            reader = new BufferedReader(new InputStreamReader(s.getInputStream()));
            System.out.println("Connected");
        } catch (IOException ex) {
            System.out.print(ex);
        }
        writer.write(command);
        errorLabel.setText(reader.readLine());
    }
    private void ClearFieldsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearFieldsBtnActionPerformed
        Result.setText("");
        SelectFileLb.setText("");
        JobName.setText("");
        SelectInputFileLb.setText("");
        stdout.setText("");
        stderr.setText("");
        gmlog.setText("");
        wallTime.setText("");
        count.setText("");
        queue.setText("");
        runtimeenvironment.setText("");
    }//GEN-LAST:event_ClearFieldsBtnActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed

        LoginPage.profilePage.setVisible(true);
        ProfilePage.createJobPage.setVisible(false);
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void CreateBashScriptBtnActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_CreateBashScriptBtnActionPerformed

        fileName = JOptionPane.showInputDialog("Enter file name");
        String resultSH = Result.getText();
	 if (fileName != null && resultSH!= null) {
                SelectSHCB.addItem(fileName);
         try {
             s = new Socket(address, port);
             writer = new PrintWriter(new OutputStreamWriter(s.getOutputStream()));
             reader = new BufferedReader(new InputStreamReader(s.getInputStream()));
             System.out.println("Connected");
         } catch (IOException ex) {
             System.out.print(ex);
         }

         System.out.println("writing to server: "+fileName +"\n");
         writer.write("createSHFile\n");
         writer.write(fileName+"\n");
         writer.write(resultSH+"\n");

         getResult(errorLabel, "getResult");
        }
    }//GEN-LAST:event_CreateBashScriptBtnActionPerformed

    private void SelectProgCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectProgCBActionPerformed
       if(SelectProgCB.getSelectedItem().toString()=="LAMMPS"){

           Result.setText("#!/bin/bash" + "\n"+
                   "\r\n"+"$LMP_MPIRUN <in");
      }
       if(SelectProgCB.getSelectedItem().toString()=="Quantum Espresso"){
           queue.setText("mult.q");
           gmlog.setText("gridlog");
           runtimeenvironment.setText("\"Espresso-OPENMPI-12\"");
           stderr.setText("espresso.err");
           stdout.setText("espresso.out");

           Result.setText("#!/bin/bash" + "\n"+
                   "\r\n"+"$QE_MPIRUN $QE_PATH/");
      }
        if(SelectProgCB.getSelectedItem().toString()=="GROMACS"){
           Result.setText("#!/bin/bash\n" +
                   "$GMX_MDRUN -v -deffnm em");
      }
        if(SelectProgCB.getSelectedItem().toString()=="DL_POLY Classic"){
           Result.setText("#!/bin/bash\n" +
                   "$DLC_MPIRUN");
      }
        if(SelectProgCB.getSelectedItem().toString()=="MPI"){
           Result.setText("#!/bin/bash\n" +
                   "chmod +x myprog\n" +
                   "$MPIRUN myprog");
      }
        if(SelectProgCB.getSelectedItem().toString()=="...................."){

           Result.setText("");
      }
    }//GEN-LAST:event_SelectProgCBActionPerformed

    private void SelectInFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
         int returnVal;
        returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            InputFile = fileChooser.getSelectedFile();
            inputFileLb.setText(InputFile.getName());
            SelectInputFileLb.setText(inputFileLb.getText());
            try {
                SelectFile.SelectFile(InputFile, errorLabel);
            } catch (IOException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SelectInFileActionPerformed

    private void SelectResolCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectResolCBActionPerformed
        if(SelectResolCB.getSelectedItem().toString()=="pw.x"){

            String inputFile= InputFile.getName();
            String outputFile = inputFile.replaceAll(".in", ".out");

           Result.setText("#!/bin/bash" + "\n"+
                   "\r\n"+"$QE_MPIRUN $QE_PATH/pw.x <"+inputFile+"> "+outputFile);
      }
        if(SelectResolCB.getSelectedItem().toString()=="...................."){

           Result.setText("");
      }
    }//GEN-LAST:event_SelectResolCBActionPerformed

    private void SaveEnvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveEnvBtnActionPerformed

        if (!SelectInputFileLb4.getText().isEmpty()
                &&!SelectInputFileLb3.getText().isEmpty()
                &&!SelectInputFileLb2.getText().isEmpty()
                &&!SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb2.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb3.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb4.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")"
                + "\n(gmlog="+gmlog.getText()+")"
                + "\n(wallTime="+wallTime.getText()+")"
                + "\n(count="+count.getText()+")"
                + "\n(queue="+queue.getText()+")"
                + "\n(runtimeenvironment="+runtimeenvironment.getText()+")");
        }else if(!SelectInputFileLb3.getText().isEmpty()
                &&!SelectInputFileLb2.getText().isEmpty()
                &&!SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb2.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb3.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")"
                + "\n(gmlog="+gmlog.getText()+")"
                + "\n(wallTime="+wallTime.getText()+")"
                + "\n(count="+count.getText()+")"
                + "\n(queue="+queue.getText()+")"
                + "\n(runtimeenvironment="+runtimeenvironment.getText()+")");

        }else if(!SelectInputFileLb2.getText().isEmpty()
                && !SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb2.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")"
                + "\n(gmlog="+gmlog.getText()+")"
                + "\n(wallTime="+wallTime.getText()+")"
                + "\n(count="+count.getText()+")"
                + "\n(queue="+queue.getText()+")"
                + "\n(runtimeenvironment="+runtimeenvironment.getText()+")");

        }else if(!SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \" \"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")"
                + "\n(gmlog="+gmlog.getText()+")"
                + "\n(wallTime="+wallTime.getText()+")"
                + "\n(count="+count.getText()+")"
                + "\n(queue="+queue.getText()+")"
                + "\n(runtimeenvironment="+runtimeenvironment.getText()+")");

        }

    }//GEN-LAST:event_SaveEnvBtnActionPerformed

    private void SelectSHCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectSHCBActionPerformed

        if(SelectProgCB.getSelectedItem().toString()=="...................."){

            SelectFileLb.setText("");
        }  else{
            String SHFileName= SelectSHCB.getSelectedItem().toString();
            SelectFileLb.setText(SHFileName+".sh");
        }
    }//GEN-LAST:event_SelectSHCBActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        if (!SelectInputFileLb4.getText().isEmpty()
                &&!SelectInputFileLb3.getText().isEmpty()
                &&!SelectInputFileLb2.getText().isEmpty()
                &&!SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb2.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb3.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb4.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")");
        }else if(!SelectInputFileLb3.getText().isEmpty()
                &&!SelectInputFileLb2.getText().isEmpty()
                &&!SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb2.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb3.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")");

        }else if(!SelectInputFileLb2.getText().isEmpty()
                && !SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "(\""+SelectInputFileLb2.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")");

        }else if(!SelectInputFileLb.getText().isEmpty()){
            Result.setText("&(exectutable="+SelectFileLb.getText() +
                ")\n(jobname="+JobName.getText()+
                ")\n(inputFiles=(\""+SelectInputFileLb.getText()+"\" \"\" )) "
                + "\n(outputFiles=(\"/\" \"\"))"
                + "\n(stdout="+stdout.getText()+")"
                + "\n(stderr="+stderr.getText()+")");

        }
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void SelectInputFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInputFileBtnActionPerformed

        JFileChooser fileChooser = new JFileChooser();
         int returnVal;
        returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            InputFile = fileChooser.getSelectedFile();
            SelectInputFileLb.setText(InputFile.getName());

            try {
                SelectFile.SelectFile(InputFile, errorLabel);
            } catch (IOException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }



    }//GEN-LAST:event_SelectInputFileBtnActionPerformed

    private void SelectInputFileBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInputFileBtn2ActionPerformed
      JFileChooser fileChooser = new JFileChooser();
         int returnVal;
        returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            InputFile = fileChooser.getSelectedFile();
            SelectInputFileLb2.setText(InputFile.getName());

            try {
                SelectFile.SelectFile(InputFile, errorLabel);
            } catch (IOException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_SelectInputFileBtn2ActionPerformed

    private void SelectInputFileBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInputFileBtn3ActionPerformed
       JFileChooser fileChooser = new JFileChooser();
         int returnVal;
        returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            InputFile = fileChooser.getSelectedFile();
            SelectInputFileLb3.setText(InputFile.getName());

            try {
                SelectFile.SelectFile(InputFile, errorLabel);
            } catch (IOException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SelectInputFileBtn3ActionPerformed

    private void SelectInputFileBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInputFileBtn4ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
         int returnVal;
        returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            InputFile = fileChooser.getSelectedFile();
            SelectInputFileLb4.setText(InputFile.getName());

            try {
                SelectFile.SelectFile(InputFile, errorLabel);
            } catch (IOException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SelectInputFileBtn4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CreateJobPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateJobPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel BashScriptPanel;
    public JButton CancelBtn;
    public JButton ClearFieldsBtn;
    public JButton CreateBashScriptBtn;
    public JButton CreateJobBtn;
    public JPanel EnvironmentPanel;
    public JLabel ExecutLb;
    public JPanel GeneralPanel;
    public JLabel InputFileLb;
    public JTextField JobName;
    public JLabel JobNameLb;
    private JPanel MainPanel;
    private JTabbedPane MainTabbedPane;
    public JButton OpenJobBtn;
    public JTextPane Result;
    public JScrollPane ResultScrollPane;
    public JButton SaveBtn;
    public JButton SaveEnvBtn;
    public JLabel SelectFileLb;
    private JButton SelectInFile;
    private JButton SelectInputFileBtn;
    public JButton SelectInputFileBtn2;
    private JButton SelectInputFileBtn3;
    public JButton SelectInputFileBtn4;
    public JLabel SelectInputFileLb;
    public JLabel SelectInputFileLb2;
    public JLabel SelectInputFileLb3;
    public JLabel SelectInputFileLb4;
    public JLabel SelectInputLb;
    public JComboBox SelectProgCB;
    public JLabel SelectProgLb;
    public JComboBox SelectResolCB;
    public JLabel SelectResolLb;
    public JComboBox SelectSHCB;
    private JLabel TopLabel;
    public JPanel TopPanel;
    public JTextField count;
    public JLabel countLb;
    private JLabel errorLabel;
    public JTextField gmlog;
    public JLabel gmlogLb;
    public JLabel inputFileLb;
    private JPanel jPanel1;
    public JTextField queue;
    public JLabel queueLb;
    public JTextField runtimeenvironment;
    public JLabel runtimeenvironmentLb;
    public JTextField stderr;
    public JLabel stderrLb;
    public JTextField stdout;
    public JLabel stdoutLb;
    public JTextField wallTime;
    public JLabel wallTimeLb;
    // End of variables declaration//GEN-END:variables
    public static ArrayList<String> titleList;
    public static String fileName;
    public JButton SelectSecondInputFileBtn;
    public static GroupLayout GeneralPanelLayout;
    
    
}
